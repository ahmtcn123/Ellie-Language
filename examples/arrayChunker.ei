//A module that chunks array to given number
//[1, 2, 3, 4, 5, 6, 7, 8, 9] > [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

class Chunker<T> {
    co(chunkCount, items);
    pri v chunkCount : int;
    pri v items : [T, *]; //This is a dynamic array

    fn chunks() : [[T, *], *] {
        v chunks : [[T, *], *];
        v temp : [T, self.chunkCount];
        //iter 0 to given items length, write to variable i
        for i : self.items.len {
            if temp.len == self.chunkCount { //if we reached given cut size
                chunks.push(temp); //Push chunk to main array
                temp.clean(); //Clear temp array
            } else {
                temp.push(this.items[i]!); //Add to temp array until its full of given limit
            }
        }
        if temp.len != 0 { //If temp array isn't empty push remaining chunk to main array
            chunks.push(temp);
            temp.clean(); //Clear temp array
        }
        ret chunks; //Return main array
    }
}

fn main() {
    //Usage:
    v categories : [int, *] = [
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9
    ];

    v chunker = new Chunker(3, categories);
    v chunked = chunker.chunks();
}
