            let mut child_parser = functiondata.code.clone();
            child_parser.options = parser.options.clone();
            child_parser.options.parser_type = defs::ParserType::ClassParser;
            child_parser.pos = parser.pos;
            let mut child_parser_errors: Vec<error::Error> = Vec::new();
            parser::iterator::iter(
                &mut child_parser,
                &mut child_parser_errors,
                letter_char,
                next_char,
                last_char,
            );

            for i in child_parser_errors {
                let mut edited = i;
                edited.pos.range_start.0 += parser.pos.0;
                edited.pos.range_start.1 += parser.pos.1;
                edited.pos.range_end.0 += parser.pos.0;
                edited.pos.range_end.1 += parser.pos.1;
                errors.push(edited);
            }
            functiondata.code = child_parser;